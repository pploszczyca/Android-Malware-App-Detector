from sklearn.ensemble import GradientBoostingClassifier
from sklearn.model_selection import GridSearchCV
from training_models.classifier import Classifier


class GBMClassifierModel(Classifier):
    def __init__(self, training_data, test_data):
        super().__init__(training_data, test_data, "Gradient Boosting Classifier")
        gbc = GradientBoostingClassifier()
        self.param_grid = {
            'n_estimators': [100, 200, 300],  # Number of boosting stages to perform
            'learning_rate': [0.01, 0.1, 0.2],  # Shrinks the contribution of each tree
            'max_depth': [3, 5, 8],  # Maximum depth of the individual regression estimators
            'min_samples_split': [2, 5],  # The minimum number of samples required to split an internal node
            'min_samples_leaf': [1, 3],  # The minimum number of samples required to be at a leaf node
            'subsample': [0.9, 1.0],  # The fraction of samples to be used for fitting the individual base learners
            'max_features': ['sqrt', 'log2', None]  # The number of features to consider when looking for the best split
        }
        self.grid_search = GridSearchCV(gbc, self.param_grid, cv=5, scoring='accuracy', verbose=1)
