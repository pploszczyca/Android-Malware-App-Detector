import argparse
import threading

import pandas as pd

from training_models.decision_tree_classifier import DecisionTreeClassifierModel
from training_models.k_neighbors_classifier import KNeighborsClassifierModel
from training_models.logistic_regression_classifier import LogisticRegressionClassifierModel
from training_models.naive_bayes_classifier import NaiveBayesClassifier
from training_models.plot_statistics import plot_model_statistics
from training_models.random_forest_classifier import RandomForestClassifierModel
from training_models.svm_classifier import SVMClassifierModel


def main(strategy_name):
    training_data = pd.read_csv('processed_data/train.csv')
    test_data = pd.read_csv('processed_data/test.csv')

    classifiers = [
        NaiveBayesClassifier,
        DecisionTreeClassifierModel,
        KNeighborsClassifierModel,
        LogisticRegressionClassifierModel,
        RandomForestClassifierModel,
        SVMClassifierModel,
    ]

    print("Training models...")
    classifier_instances = [classifier(training_data, test_data) for classifier in classifiers]
    train_models(classifier_instances)

    print("Getting and printing statistics...")
    statistics = [model.get_and_print_statistics() for model in classifier_instances]

    print("Plotting statistics...")
    plot_model_statistics(statistics, strategy_name)


def train_models(classifier_instances):
    threads = [threading.Thread(target=model.train) for model in classifier_instances]
    for thread in threads:
        thread.start()
    for thread in threads:
        thread.join()


if __name__ == '__main__':
    parser = argparse.ArgumentParser(description='Run data preprocessing with a specified strategy.')
    parser.add_argument('strategy', type=str, help='The name of the preprocessing strategy to use.')
    args = parser.parse_args()
    main(args.strategy)
