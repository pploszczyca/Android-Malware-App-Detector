import argparse
import logging
import threading

import pandas as pd

from training_models.classifier_models import DecisionTreeClassifierModel
from training_models.classifier_models import KNeighborsClassifierModel
from training_models.classifier_models import LogisticRegressionClassifierModel
from training_models.classifier_models import NaiveBayesClassifier
from training_models.classifier_models import RandomForestClassifierModel
from training_models.classifier_models import SVMClassifierModel
from training_models.plot_statistics import plot_model_statistics


def main(strategy_name):
    logging.basicConfig(level=logging.INFO,
                        format='%(asctime)s - %(name)s - %(levelname)s - %(strategy_name)s - %(message)s')
    logger = logging.getLogger(__name__)

    base_folder_path = f'processed_data/{strategy_name}'
    training_data = pd.read_csv(f'{base_folder_path}/train.csv')
    test_data = pd.read_csv(f'{base_folder_path}/test.csv')

    classifiers = [
        NaiveBayesClassifier,
        DecisionTreeClassifierModel,
        KNeighborsClassifierModel,
        LogisticRegressionClassifierModel,
        RandomForestClassifierModel,
        SVMClassifierModel,
    ]

    logger.info("Training models...", extra={'strategy_name': strategy_name})
    classifier_instances = [classifier(training_data, test_data) for classifier in classifiers]
    train_models(classifier_instances)

    logger.info("Getting and printing statistics...", extra={'strategy_name': strategy_name})
    statistics = [model.get_and_print_statistics() for model in classifier_instances]

    logger.info("Plotting statistics...", extra={'strategy_name': strategy_name})
    plot_model_statistics(statistics, strategy_name)


def train_models(classifier_instances):
    threads = [threading.Thread(target=model.train) for model in classifier_instances]
    for thread in threads:
        thread.start()
    for thread in threads:
        thread.join()


if __name__ == '__main__':
    parser = argparse.ArgumentParser(description='Run data preprocessing with a specified strategy.')
    parser.add_argument('strategy', type=str, help='The name of the preprocessing strategy to use.')
    args = parser.parse_args()
    main(args.strategy)
