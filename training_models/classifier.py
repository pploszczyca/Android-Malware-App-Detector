from abc import ABC

from sklearn.metrics import accuracy_score, confusion_matrix, classification_report


class Classifier(ABC):
    def __init__(self, training_data, test_data, name):
        self.name = name
        self.X_train = training_data.drop('Label', axis=1)
        self.y_train = training_data['Label']
        self.X_test = test_data.drop('Label', axis=1)
        self.y_test = test_data['Label']
        self.model = None
        self.grid_search = None

    def train_and_evaluate(self):
        if self.grid_search is not None:
            self.grid_search.fit(self.X_train, self.y_train)
            self.model = self.grid_search.best_estimator_
            self.__print_best_params()
        else:
            self.model.fit(self.X_train, self.y_train)

    def print_normal_statistics(self):
        self.__print_statistics(self.X_test, self.y_test)

    def __print_statistics(self, x_data, y_data):
        predictions = self.model.predict(x_data)
        accuracy = accuracy_score(y_data, predictions)
        confusion = confusion_matrix(y_data, predictions)
        report = classification_report(y_data, predictions)

        print(f"Classifier: {self.name}")
        print(f"Accuracy: {accuracy}")
        print(f"Confusion Matrix:\n{confusion}")
        print(f"Classification Report:\n{report}")

        print("\n")

    def __print_best_params(self):
        if self.grid_search:
            print(f"Best Parameters for {self.name}: {self.grid_search.best_params_}\n")
