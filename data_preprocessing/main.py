from dataclasses import dataclass

import pandas as pd
from pandas import DataFrame

from data_preprocessing.data_preprocessor_builder import DataPreprocessorBuilder
from data_preprocessing.data_splitter_saver import DataSplitterSaver


@dataclass
class Data:
    data_name: str
    file_path: str
    result_col_name: str


def main():
    datasets_folder_path = '../datasets/'
    data: list[Data] = [
        Data(data_name='Naticusdroid', file_path=datasets_folder_path + 'naticusdroid+android+permissions+dataset.csv',
             result_col_name='Label'),
        Data(data_name='Android_Malware_Benign', result_col_name='Label',
             file_path=datasets_folder_path + 'Android_Malware_Benign.csv')
    ]

    columns_to_filter = [
        "Label",
        "ACCESS_COARSE_LOCATION",
        "ACCESS_FINE_LOCATION",
        "ACCESS_NETWORK_STATE",
        "ACCESS_WIFI_STATE",
        "CALL_PHONE",
        "CAMERA",
        "CHANGE_WIFI_STATE",
        "GET_ACCOUNTS",
        "GET_TASKS",
        "READ_CONTACTS",
        "READ_EXTERNAL_STORAGE",
        "READ_PHONE_STATE",
        "READ_SMS",
        "RECEIVE_BOOT_COMPLETED",
        "RECEIVE_SMS",
        "SEND_SMS",
        "SYSTEM_ALERT_WINDOW",
        "VIBRATE",
        "WAKE_LOCK",
        "WRITE_EXTERNAL_STORAGE",
        "WRITE_SETTINGS",
        "SUM_OF_PERMITTED_PERMISSIONS",
        "INSTALL_SHORTCUT",
        "RECEIVE",
        "READ_LOGS",
        "BILLING",
    ]

    results: list[pd.DataFrame] = []
    for d in data:
        result: DataFrame = DataPreprocessorBuilder(data_name=d.data_name, result_col_name=d.result_col_name) \
            .load_data(d.file_path) \
            .remove_columns_containing_arrow() \
            .add_sum_of_permitted_permissions() \
            .normalize_label() \
            .remove_unbalanced_columns(threshold=0.95) \
            .normalize_data() \
            .cut_names_from_all_columns() \
            .filter_columns(columns_to_filter) \
            .show_basic_statistics() \
            .build()

        results.append(result)

    DataSplitterSaver(data_list=results).process_and_save(folder_path='../processed_data/')


if __name__ == '__main__':
    main()
