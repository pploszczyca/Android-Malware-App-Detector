from dataclasses import dataclass

import pandas as pd

from data_preprocessing.PreprocessingStrategy import PreprocessingStrategy, Data
from data_preprocessing.data_preprocessor_builder import DataPreprocessorBuilder


@dataclass
class ColumnToSum:
    column_name: str
    columns: list[str]


class GroupPermissionStrategy(PreprocessingStrategy):
    def preprocess(self, data: list[Data]) -> list[pd.DataFrame]:
        contact_calendar_access = ColumnToSum(
            column_name="ContactCalendarAccess",
            columns=[
                "READ_CONTACTS", "WRITE_CONTACTS", "READ_CALENDAR", "WRITE_CALENDAR"
            ]
        )

        communication_access = ColumnToSum(
            column_name="CommunicationAccess",
            columns=[
                "READ_SMS", "RECEIVE_SMS", "SEND_SMS", "CALL_PHONE", "PROCESS_INCOMING_CALLS"
            ]
        )

        account_storage_access = ColumnToSum(
            column_name="AccountStorageAccess",
            columns=[
                "READ_EXTERNAL_STORAGE", "WRITE_EXTERNAL_STORAGE", "GET_ACCOUNTS", "AUTHENTICATE_ACCOUNTS",
                "MANAGE_ACCOUNTS", "USE_CREDENTIALS"
            ]
        )

        network_connectivity_settings = ColumnToSum(
            column_name="NetworkConnectivitySettings",
            columns=[
                "CHANGE_WIFI_STATE", "CHANGE_NETWORK_STATE", "ACCESS_WIFI_STATE", "ACCESS_NETWORK_STATE"
            ]
        )

        system_configuration_maintenance = ColumnToSum(
            column_name="SystemConfigurationMaintenance",
            columns=[
                "WRITE_SETTINGS", "SYSTEM_ALERT_WINDOW", "CHANGE_CONFIGURATION", "MOUNT_UNMOUNT_FILESYSTEMS",
                "BIND_GET_INSTALL_REFERRER_SERVICE", "FOREGROUND_SERVICE", "GET_TASKS"
            ]
        )

        device_hardware_control = ColumnToSum(
            column_name="DeviceHardwareControl",
            columns=[
                "RECORD_AUDIO", "MODIFY_AUDIO_SETTINGS",
                "CAMERA", "FLASHLIGHT",
                "ACCESS_FINE_LOCATION", "ACCESS_COARSE_LOCATION", "ACCESS_LOCATION_EXTRA_COMMANDS",
                "ACCESS_MOCK_LOCATION", "ACTIVITY_RECOGNITION", "USE_FINGERPRINT"
            ]
        )

        network_communication = ColumnToSum(
            column_name="NetworkCommunication",
            columns=[
                "INTERNET", "ACCESS_NETWORK_STATE", "DOWNLOAD_WITHOUT_NOTIFICATION",
                "BLUETOOTH_ADMIN", "NFC"
            ]
        )

        miscellaneous_permissions = ColumnToSum(
            column_name="MiscellaneousPermissions",
            columns=[
                "UPDATE_BADGE", "BROADCAST_BADGE", "BADGE_COUNT_WRITE", "BADGE_COUNT_READ",
                "INSTALL_SHORTCUT", "UNINSTALL_SHORTCUT", "KILL_BACKGROUND_PROCESSES", "RESTART_PACKAGES",
                "RECEIVE_BOOT_COMPLETED"
            ]
        )

        ui_interactions_feedback = ColumnToSum(
            column_name="UIInteractionsFeedback",
            columns=[
                "VIBRATE", "SET_WALLPAPER", "SET_WALLPAPER_HINTS",
                "BROADCAST_STICKY", "RECEIVE_USER_PRESENT"
            ]
        )

        security_licensing = ColumnToSum(
            column_name="SecurityLicensing",
            columns=[
                "CHECK_LICENSE", "WRITE_USE_APP_FEATURE_SURVEY", "DISABLE_KEYGUARD", "REQUEST_INSTALL_PACKAGES"
            ]
        )

        all_categories = [
            contact_calendar_access,
            communication_access,
            account_storage_access,
            network_connectivity_settings,
            system_configuration_maintenance,
            device_hardware_control,
            network_communication,
            miscellaneous_permissions,
            ui_interactions_feedback,
            security_licensing
        ]

        columns_to_filter = ["Label", "SUM_OF_PERMITTED_PERMISSIONS"] + [category.column_name for category in all_categories]

        results = [self.__process_single_data(d, columns_to_filter, all_categories) for d in data]

        print("Common columns: ", self.__get_common_columns(results))

        return results

    @staticmethod
    def __get_common_columns(dataframes):
        # Get the column names of the first dataframe and convert them to a set
        common_columns = set(dataframes[0].columns)

        # Iterate over the rest of the dataframes
        for df in dataframes[1:]:
            # Update the set of common columns
            common_columns &= set(df.columns)

            # If the set of common columns is empty, break the loop
            if not common_columns:
                break

        return common_columns

    @staticmethod
    def __process_single_data(d: Data, columns_to_filter: list[str], columns_to_sum: list[ColumnToSum]) -> pd.DataFrame:
        builder = DataPreprocessorBuilder(data_name=d.data_name, result_col_name=d.result_col_name) \
            .load_data(d.file_path) \
            .remove_columns_containing_arrow() \
            .add_sum_of_permitted_permissions() \
            .normalize_label() \
            .cut_names_from_all_columns() \

        for column in columns_to_sum:
            builder.add_sum_of_columns(column.columns, column.column_name)

        builder \
            .filter_columns(columns_to_filter) \
            .normalize_data() \
            .show_basic_statistics()

        return builder.build()
