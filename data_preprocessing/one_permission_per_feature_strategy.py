import pandas as pd

from data_preprocessing.preprocessing_strategy import PreprocessingStrategy, Data
from data_preprocessing.data_preprocessor_builder import DataPreprocessorBuilder


class OnePermissionPerFeatureStrategy(PreprocessingStrategy):
    columns_to_filter = [
        "WRITE_EXTERNAL_STORAGE",
        "CALL_PHONE",
        "READ_EXTERNAL_STORAGE",
        "ACCESS_WIFI_STATE",
        "READ_CONTACTS",
        "CHANGE_WIFI_STATE",
        "Label",
        "WRITE_SETTINGS",
        "RECEIVE_BOOT_COMPLETED",
        "BLUETOOTH",
        "RECORD_AUDIO",
        "RECEIVE",
        "SEND_SMS",
        "VIBRATE",
        "FLASHLIGHT",
        "GET_ACCOUNTS",
        "CAMERA",
        "SYSTEM_ALERT_WINDOW",
        "WAKE_LOCK",
        "GET_TASKS",
        "BILLING",
        "READ_GSERVICES",
        "INSTALL_SHORTCUT",
        "READ_LOGS",
        "ACCESS_FINE_LOCATION",
        "READ_PHONE_STATE",
        "SET_WALLPAPER",
        "RECEIVE_SMS",
        "MODIFY_AUDIO_SETTINGS",
        "DISABLE_KEYGUARD",
        "ACCESS_COARSE_LOCATION",
        "READ_SETTINGS",
    ]

    def preprocess(self, data: list[Data]) -> list[pd.DataFrame]:
        return [self.__process_single_data(d, self.columns_to_filter) for d in data]

    @staticmethod
    def __process_single_data(d: Data, columns_to_filter: list[str]) -> pd.DataFrame:
        return DataPreprocessorBuilder(data_name=d.data_name, result_col_name=d.result_col_name) \
            .load_data(d.file_path) \
            .remove_columns_containing_arrow() \
            .normalize_label() \
            .remove_unbalanced_columns(threshold=0.95) \
            .normalize_data() \
            .cut_names_from_all_columns() \
            .filter_columns(columns_to_filter) \
            .balance_classes() \
            .show_basic_statistics() \
            .build()

    @staticmethod
    def __get_common_columns(dataframes):
        # Get the column names of the first dataframe and convert them to a set
        common_columns = set(dataframes[0].columns)

        # Iterate over the rest of the dataframes
        for df in dataframes[1:]:
            # Update the set of common columns
            common_columns &= set(df.columns)

            # If the set of common columns is empty, break the loop
            if not common_columns:
                break

        return common_columns
