import logging

import pandas as pd

from data_preprocessing.permission_category import PermissionCategory


class DataPreprocessorBuilder:
    def __init__(self, data_name='general'):
        self.data = None
        logging.basicConfig(level=logging.INFO,
                            format='%(asctime)s - %(name)s - %(levelname)s - %(data_name)s - %(message)s')
        self.logger = logging.getLogger(__name__)
        self.data_name = data_name

    def load_data(self, file_path: str) -> 'DataPreprocessorBuilder':
        self.data = pd.read_csv(file_path)
        self.__log_info("Data loaded successfully.")
        return self

    def show_basic_statistics(self) -> 'DataPreprocessorBuilder':
        self.__require_data()

        self.__log_info("Basic statistics of the data:")

        self.__log_info(f"Data shape: {self.data.shape}")
        self.__log_info("Columns:")
        for column in self.data.columns:
            self.__log_info(f"{column}: {self.data[column].dtype}")

        self.__log_info("Data description:")
        for stat in self.data:
            self.__log_info(f"{stat}: {self.data[stat].describe()}")

        return self

    def add_sum_of_permitted_permissions(self) -> 'DataPreprocessorBuilder':
        self.__require_data()

        self.data['sum_of_permitted_permissions'] = self.data.iloc[:, 1:].sum(axis=1)
        self.__log_info("Sum of permitted permissions has been added to the data.")

        return self

    def normalize_data(self) -> 'DataPreprocessorBuilder':
        self.__require_data()

        self.data = (self.data - self.data.min()) / (self.data.max() - self.data.min())
        self.__log_info("Data has been normalized.")

        return self

    def remove_unbalanced_columns(self, threshold=0.9) -> 'DataPreprocessorBuilder':
        self.__require_data()

        initial_column_count = self.data.shape[1]
        self.data = self.data.loc[:, (self.data.apply(lambda x: x.value_counts(normalize=True).iloc[0]) < threshold)]
        removed_column_count = initial_column_count - self.data.shape[1]

        self.__log_info(f"Unbalanced columns have been removed. {removed_column_count} columns were removed.")

        return self

    def sum_permissions_by_category(self, permission_categories: list[PermissionCategory]) -> 'DataPreprocessorBuilder':
        self.__require_data()

        for category in permission_categories:
            self.data[category.name] = self.data[category.permissions].sum(axis=1)
            self.__log_info(f"Sum of permissions in category {category.name} has been added to the data.")

        return self

    def __require_data(self):
        if self.data is None:
            raise ValueError("Data has not been loaded yet.")

    def __log_info(self, message: str):
        self.logger.info(message, extra={'data_name': self.data_name})

    def build(self):
        return self.data
